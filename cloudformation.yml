Resources:
  SmartPhotoAlbumAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: SmartPhotoAlbumAPI

  SearchResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref SmartPhotoAlbumAPI
      ParentId: !GetAtt SmartPhotoAlbumAPI.RootResourceId
      PathPart: search

  GetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref SmartPhotoAlbumAPI
      ResourceId: !Ref SearchResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LF2.Arn}/invocations'
        IntegrationResponses:
        - StatusCode: 200

  BucketResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref SmartPhotoAlbumAPI
      ParentId: !GetAtt SmartPhotoAlbumAPI.RootResourceId
      PathPart: '{bucket}'
  
  FilenameResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref SmartPhotoAlbumAPI
      ParentId: !Ref BucketResource
      PathPart: '{filename}'
    
  PutMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref SmartPhotoAlbumAPI
      ResourceId: !Ref FilenameResource
      HttpMethod: PUT
      AuthorizationType: NONE
      RequestParameters:
        method.request.path.bucket: true
        method.request.path.filename: true
        # method.request.header.x-amz-meta-customLabels: true
      Integration:
        Type: AWS
        IntegrationHttpMethod: PUT
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:s3:path/{method.request.path.bucket}/{method.request.path.filename}'
        # RequestParameters:
          # integration.request.header.x-amz-meta-customLabels: 'x-amz-meta-customLabels'
        IntegrationResponses:
        - StatusCode: 200
        Credentials: !GetAtt ApiGatewayToS3Role.Arn

  LF2:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: spalambdabucket
        S3Key: lambda_function_2.zip
      Handler: lambda_function_2.lambda_handler
      Role: !GetAtt LambdaExecutionRole2.Arn
      Runtime: python3.9  
  LambdaExecutionRole2:
    Type: AWS::IAM::Role
    Properties:
      RoleName: my-lambda-execution-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: logs
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                  - logs:PutLogEvents
                  - logs:GetLogEvents
                  - logs:FilterLogEvents
                Resource: "*"
        - PolicyName: api-gateway
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - execute-api:Invoke
                  - execute-api:ManageConnections
                Resource: "*"
        - PolicyName: additional-permissions
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - cloudwatch:GetMetricStatistics
                  - cloudwatch:DescribeAlarms
                  - cloudwatch:DescribeAlarmsForMetric
                  - kms:DescribeKey
                  - kms:ListAliases
                  - lambda:GetPolicy
                  - lambda:ListFunctions
                  - lex:*
                  - polly:DescribeVoices
                  - polly:SynthesizeSpeech
                  - kendra:ListIndices
                  - iam:ListRoles
                  - s3:ListAllMyBuckets
                  - logs:DescribeLogGroups
                  - s3:GetBucketLocation
                  - lambda:AddPermission
                  - lambda:RemovePermission
                Resource:
                  - "*"
              - Effect: Allow
                Action:
                  - iam:GetRole
                Resource:
                  - arn:aws:iam::*:role/aws-service-role/lex.amazonaws.com/AWSServiceRoleForLexBots
                  - arn:aws:iam::*:role/aws-service-role/channels.lex.amazonaws.com/AWSServiceRoleForLexChannels
                  - arn:aws:iam::*:role/aws-service-role/lexv2.amazonaws.com/AWSServiceRoleForLexV2Bots*
                  - arn:aws:iam::*:role/aws-service-role/channels.lexv2.amazonaws.com/AWSServiceRoleForLexV2Channels*
              - Effect: Allow
                Action:
                  - iam:CreateServiceLinkedRole
                Resource:
                  - arn:aws:iam::*:role/aws-service-role/lex.amazonaws.com/AWSServiceRoleForLexBots
                Condition:
                  StringEquals:
                    iam:AWSServiceName: "lex.amazonaws.com"
  ApiGatewayToS3Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: "s3access"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource: 
                  - arn:aws:s3:::spalambdabucket/*