Resources:
  #S3 bucket for frontend
  S3Bucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: spa-frontend183556
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
  S3BucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: 'PublicReadGetObject'
            Effect: 'Allow'
            Principal: '*'
            Action:
              - 's3:GetObject'
            Resource: !Join ['', ['arn:aws:s3:::', 'spa-frontend183556', '/*']]
  
  # uplaoded pictures storage bucket
  S3Bucket2:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: pictures435

  #API Gateway
  SmartPhotoAlbumAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: SmartPhotoAlbumAPI

  SearchResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref SmartPhotoAlbumAPI
      ParentId: !GetAtt SmartPhotoAlbumAPI.RootResourceId
      PathPart: search

  GetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref SmartPhotoAlbumAPI
      ResourceId: !Ref SearchResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LF2.Arn}/invocations'
        IntegrationResponses:
        - StatusCode: 200

  BucketResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref SmartPhotoAlbumAPI
      ParentId: !GetAtt SmartPhotoAlbumAPI.RootResourceId
      PathPart: '{bucket}'
  
  FilenameResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref SmartPhotoAlbumAPI
      ParentId: !Ref BucketResource
      PathPart: '{filename}'
    
  PutMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref SmartPhotoAlbumAPI
      ResourceId: !Ref FilenameResource
      HttpMethod: PUT
      AuthorizationType: NONE
      RequestParameters:
        method.request.path.bucket: true
        method.request.path.filename: true
        # method.request.header.x-amz-meta-customLabels: true
      Integration:
        Type: AWS
        IntegrationHttpMethod: PUT
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:s3:path/{method.request.path.bucket}/{method.request.path.filename}'
        # RequestParameters:
          # integration.request.header.x-amz-meta-customLabels: 'x-amz-meta-customLabels'
        IntegrationResponses:
        - StatusCode: 200
        Credentials: !GetAtt ApiGatewayToS3Role.Arn
  #LF1
  LF1:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: spalambdabucket
        S3Key: lambda_function_1.zip
      Handler: lambda_function_1.lambda_handler
      Role: !GetAtt LambdaExecutionRole1.Arn
      Runtime: python3.9
  LambdaExecutionRole1:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - 'sts:AssumeRole'
      Path: '/'
      Policies:
      - PolicyName: lambda-s3-access
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - 's3:GetObject'
            Resource:
            - !Join ['', ['arn:aws:s3:::', !Ref S3Bucket2, '/*']]
          - Effect: Allow
            Action:
            - 'logs:CreateLogGroup'
            - 'logs:CreateLogStream'
            - 'logs:PutLogEvents'
            Resource: '*'
      - PolicyName: LambdaCloudWatchLogsPolicy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: arn:aws:logs:us-east-1:713647610890:log-group:/aws/lambda/LF1:*
      - PolicyName: LambdaS3GetObjectPolicy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - s3:GetObject
              Resource: arn:aws:s3:::*
      - PolicyName: LambdaRekognitionPolicy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - rekognition:*
              Resource: "*"
  
  #LF2
  LF2:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: spalambdabucket
        S3Key: lambda_function_2.zip
      Handler: lambda_function_2.lambda_handler
      Role: !GetAtt LambdaExecutionRole2.Arn
      Runtime: python3.9  
  LambdaExecutionRole2:
    Type: AWS::IAM::Role
    Properties:
      RoleName: my-lambda-execution-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: logs
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                  - logs:PutLogEvents
                  - logs:GetLogEvents
                  - logs:FilterLogEvents
                Resource: "*"
        - PolicyName: api-gateway
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - execute-api:Invoke
                  - execute-api:ManageConnections
                Resource: "*"
        - PolicyName: additional-permissions
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - cloudwatch:GetMetricStatistics
                  - cloudwatch:DescribeAlarms
                  - cloudwatch:DescribeAlarmsForMetric
                  - kms:DescribeKey
                  - kms:ListAliases
                  - lambda:GetPolicy
                  - lambda:ListFunctions
                  - lex:*
                  - polly:DescribeVoices
                  - polly:SynthesizeSpeech
                  - kendra:ListIndices
                  - iam:ListRoles
                  - s3:ListAllMyBuckets
                  - logs:DescribeLogGroups
                  - s3:GetBucketLocation
                  - lambda:AddPermission
                  - lambda:RemovePermission
                Resource:
                  - "*"
              - Effect: Allow
                Action:
                  - iam:GetRole
                Resource:
                  - arn:aws:iam::*:role/aws-service-role/lex.amazonaws.com/AWSServiceRoleForLexBots
                  - arn:aws:iam::*:role/aws-service-role/channels.lex.amazonaws.com/AWSServiceRoleForLexChannels
                  - arn:aws:iam::*:role/aws-service-role/lexv2.amazonaws.com/AWSServiceRoleForLexV2Bots*
                  - arn:aws:iam::*:role/aws-service-role/channels.lexv2.amazonaws.com/AWSServiceRoleForLexV2Channels*
              - Effect: Allow
                Action:
                  - iam:CreateServiceLinkedRole
                Resource:
                  - arn:aws:iam::*:role/aws-service-role/lex.amazonaws.com/AWSServiceRoleForLexBots
                Condition:
                  StringEquals:
                    iam:AWSServiceName: "lex.amazonaws.com"
  ApiGatewayToS3Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: "s3access"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource: 
                  - arn:aws:s3:::spalambdabucket/*

  #Elastic Search Index
  OpenSearchServiceDomain:
      Type: "AWS::OpenSearchService::Domain"
      Properties:
          DomainName: "photosindex"
          EngineVersion: "Elasticsearch_7.10"
          ClusterConfig: 
              InstanceCount: 1
              InstanceType: "t3.small.search"
          AccessPolicies: 
            Statement:
              - Effect: Allow
                Principal:
                  AWS: "*"
                Action: "es:*"
                Resource: "arn:aws:es:us-east-1:176402949356:domain/photosindex/*"
          EncryptionAtRestOptions: 
                Enabled: true
          NodeToNodeEncryptionOptions: 
                Enabled: true
          AdvancedOptions: 
              "indices.fielddata.cache.size": "20"
              "indices.query.bool.max_clause_count": "1024"
              override_main_response_version: "false"
              "rest.action.multi.allow_explicit_index": "true"
          EBSOptions: 
              EBSEnabled: true
              VolumeType: "gp3"
              VolumeSize: 10
              Iops: 3000
              Throughput: 125
          CognitoOptions: 
              Enabled: false
          DomainEndpointOptions: 
              EnforceHTTPS: true
              TLSSecurityPolicy: "Policy-Min-TLS-1-0-2019-07"
              CustomEndpointEnabled: false
          AdvancedSecurityOptions: 
              Enabled: true
              InternalUserDatabaseEnabled: true
              MasterUserOptions:
                MasterUserName: "junaid3126"
                MasterUserPassword: "AWSCloud@2023"
              AnonymousAuthEnabled: false
Outputs:  
  S3BucketURL:
    Description: "URL for the S3 bucket hosting the static website"
    Value: !Join ['', ['http://', !Ref S3Bucket, '.s3-website-', !Ref 'AWS::Region', '.amazonaws.com']]