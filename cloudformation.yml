Resources:
  SmartPhotoAlbumApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: "SmartPhotoAlbumApi"
      Body:
        swagger: "2.0"
        info:
          description: "AI Photo Search application, built during the Cloud and Big Data course at NYU"
          version: "1.0.0"
          title: "AI Photo Search"
        host: "pd6xgjeecb.execute-api.us-east-1.amazonaws.com"
        basePath: "/prod"
        schemes:
        - "https"
        paths:
          /search:
            get:
              consumes:
              - "application/json"
              parameters:
              - name: "q"
                in: "query"
                required: false
                type: "string"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              options:
                consumes:
                - "application/json"
                responses:
                  "200":
                    description: "200 response"
                    headers:
                      Access-Control-Allow-Origin:
                        type: "string"
                      Access-Control-Allow-Methods:
                        type: "string"
                      Access-Control-Allow-Headers:
                        type: "string"
          /{bucket}/{filename}:
            put:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              parameters:
              - name: "filename"
                in: "path"
                required: true
                type: "string"
              - name: "bucket"
                in: "path"
                required: true
                type: "string"
              - name: "x-amz-meta-customLabels"
                in: "header"
                required: false
                type: "string"
              - in: "body"
                name: "ImageUploadRequest"
                required: true
                schema:
                  $ref: "#/definitions/ImageUploadRequest"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              options:
                consumes:
                - "application/json"
                parameters:
                - name: "bucket"
                  in: "path"
                  required: true
                  type: "string"
                - name: "filename"
                  in: "path"
                  required: true
                  type: "string"
                responses:
                  "200":
                    description: "200 response"
                    headers:
                      Access-Control-Allow-Origin:
                        type: "string"
                      Access-Control-Allow-Methods:
                        type: "string"
                      Access-Control-Allow-Headers:
                        type: "string"
        definitions:
          ImageUploadRequest:
            type: "object"
            required:
            - "contentType"
            - "filename"
            properties:
              filename:
                type: "string"
              contentType:
                type: "string"
  DocS3Bucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName : s3lambdacodes
      Tags :
        - Key : "Documentation"
          Value : "Documentation"
  DocBucketAccessPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: "DocS3Bucket"
      PolicyDocument:
        Statement:
          - Action:
            - "s3:GetObject"
            Effect: "Allow"
            Resource:
              Fn::Join:
              - ""
              - - "arn:aws:s3:::"
                - Ref: "DocS3Bucket"
                - "/*"
            Principal:
              Service:
              - cloudformation.amazonaws.com
  LF1:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: "s3lambdacodes"
        S3Key: "test.zip"
      Handler: test.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.6
      Tags:
      -
        Key: "Documentation"
        Value: "Docbot"
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: "Allow"
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: LambdaCloudWatchLogsPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:us-east-1:713647610890:log-group:/aws/lambda/lf1-assignment-2:*
        - PolicyName: LambdaS3GetObjectPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource: arn:aws:s3:::*
        - PolicyName: LambdaRekognitionPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - rekognition:*
                Resource: "*"